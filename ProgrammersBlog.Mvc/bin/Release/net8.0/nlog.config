<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="c:\temp\internal-nlog-AspNetCore.txt">
  <!-- enable asp.net core layout renderers -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>
  <!-- the targets to write to -->
  <targets>
    <!-- File Target for all log messages with basic details -->
    <target xsi:type="File" name="allfile" fileName="c:\temp\nlog-AspNetCore-all-${shortdate}.log"
            layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}" />

    <!-- File Target for own log messages with extra web details using some ASP.NET core renderers -->
    <target xsi:type="File" name="ownFile-web" fileName="c:\temp\nlog-AspNetCore-own-${shortdate}.log"
            layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}" />

    <!-- Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
    <target xsi:type="Console" name="lifetimeConsole" layout="${MicrosoftConsoleLayout}" />

    <!-- Dosya hedefi için daha okunaklı format -->
    <target xsi:type="File" name="formattedErrorFile"
            fileName="c:\temp\errors-${shortdate}.log"
            encoding="utf-8">
      <layout xsi:type="JsonLayout" includeAllProperties="true">
        <attribute name="time" layout="${longdate}" />
        <attribute name="level" layout="${level:upperCase=true}"/>
        <attribute name="exception" layout="${exception:format=type}"/>
        <attribute name="message" layout="${message}" />
        <attribute name="user" layout="${event-properties:item=UserName:whenEmpty=Anonim}" />
        <attribute name="source" layout="${event-properties:item=Controller}.${event-properties:item=Action}" />
        <attribute name="request" layout="${event-properties:item=RequestMethod} ${event-properties:item=RequestPath}${event-properties:item=RequestQueryString}" />
        <attribute name="client" layout="${event-properties:item=ClientIp} / ${event-properties:item=Browser}" />
        <attribute name="statusCode" layout="${event-properties:item=StatusCode}" />
        <attribute name="requestId" layout="${event-properties:item=RequestId}" />
        <attribute name="stack" layout="${exception:format=tostring}" />
      </layout>
    </target>

    <!-- Genişletilmiş veritabanı hedefi -->
    <target name="database" xsi:type="Database">
      <connectionString>Server=DESKTOP-3KDSC0I\SQLEXPRESS;Database=ProgrammersBlog;Trusted_Connection=True;MultipleActiveResultSets=True;TrustServerCertificate=True;</connectionString>
      <dbProvider>Microsoft.Data.SqlClient</dbProvider>
      <commandText>
        insert into dbo.Logs (
        Id, MachineName, Logged, Level, Message,
        Logger, Callsite, Exception,
        Controller, Action, UserId, UserName,
        RequestPath, RequestMethod, ClientIp, UserAgent,
        RequestId, ExceptionType, StatusCode, RequestQueryString, Browser, RequestBody
        ) values (
        NEWID(), @MachineName, @Logged, @Level, @Message,
        @Logger, @Callsite, @Exception,
        @Controller, @Action, @UserId, @UserName,
        @RequestPath, @RequestMethod, @ClientIp, @UserAgent,
        @RequestId, @ExceptionType, @StatusCode, @RequestQueryString, @Browser, @RequestBody
        );
      </commandText>
      <parameter name="@MachineName" layout="${machinename}" />
      <parameter name="@Logged" layout="${date}" />
      <parameter name="@Level" layout="${level}" />
      <parameter name="@Message" layout="${message}" />
      <parameter name="@Logger" layout="${logger}" />
      <parameter name="@Callsite" layout="${callsite}" />
      <parameter name="@Exception" layout="${exception:tostring}" />

      <!-- Mevcut parametreler -->
      <parameter name="@Controller" layout="${event-properties:item=Controller:whenEmpty=${aspnet-mvc-controller}}" />
      <parameter name="@Action" layout="${event-properties:item=Action:whenEmpty=${aspnet-mvc-action}}" />
      <parameter name="@UserId" layout="${event-properties:item=UserId:whenEmpty=${aspnet-user-identity}}" />
      <parameter name="@UserName" layout="${event-properties:item=UserName:whenEmpty=${aspnet-user-identity}}" />
      <parameter name="@RequestPath" layout="${event-properties:item=RequestPath:whenEmpty=${aspnet-request-url}}" />
      <parameter name="@RequestMethod" layout="${event-properties:item=RequestMethod:whenEmpty=${aspnet-request-method}}" />
      <parameter name="@ClientIp" layout="${event-properties:item=ClientIp:whenEmpty=${aspnet-request-ip}}" />
      <parameter name="@UserAgent" layout="${event-properties:item=UserAgent:whenEmpty=${aspnet-request-useragent}}" />
      <parameter name="@RequestId" layout="${event-properties:item=RequestId:whenEmpty=${aspnet-traceidentifier}}" />

      <!-- Eksik parametreler -->
      <parameter name="@ExceptionType" layout="${event-properties:item=ExceptionType}" />
      <parameter name="@StatusCode" layout="${event-properties:item=StatusCode}" />
      <parameter name="@RequestQueryString" layout="${event-properties:item=RequestQueryString}" />
      <parameter name="@Browser" layout="${event-properties:item=Browser}" />
      <parameter name="@RequestBody" layout="${event-properties:item=RequestBody}" />
    </target>
  </targets>
  <!-- rules to map from logger name to target -->
  <rules>
    <!--All logs, including from Microsoft-->
    <logger name="*" minlevel="Trace" writeTo="allfile" />

    <!--Output hosting lifetime messages to console target for faster startup detection -->
    <logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole, ownFile-web" final="true" />

    <!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
    <logger name="Microsoft.*" maxlevel="Info" final="true" />
    <logger name="System.Net.Http.*" maxlevel="Info" final="true" />

    <!--Write formatted error logs to separate file -->
    <logger name="*" minlevel="Error" writeTo="formattedErrorFile" />

    <logger name="*" minlevel="Trace" writeTo="ownFile-web" />
    <logger name="*" minlevel="Warning" writeTo="database" />
  </rules>
</nlog>